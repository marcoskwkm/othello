{"version":3,"sources":["utils/errors.ts","utils/index.tsx","utils/strategies.ts","components/Cell/index.tsx","components/Board/index.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["InvalidMoveError","name","Error","getInitialState","initialState","Array","map","opposite","color","isValidPosition","row","col","performMove","state","turn","dirs","zip","nextState","clone","forEach","dr","dc","nr","nc","equals","isLegalMove","err","console","error","listLegalMoves","legalMoves","push","countLegalMoves","length","legalMovesHeuristic","heuristic","bestRow","bestCol","bestValue","Infinity","value","isFixedPiece","mine","theirs","_","flag","r","c","calcPositionScore","countPieces","flat","filter","cell","checkGameOver","Cell","props","className","classNames","disabled","onClick","Board","rowIdx","colIdx","boardState","WHITE_STRATEGY","encodedState","join","window","Module","ccall","split","val","parseInt","removePreTurn","Game","useState","setTurn","setBoardState","setError","makeMove","useCallback","nextTurn","legalMovesCount","useMemo","isGameOver","blackPieceCount","whitePieceCount","positionEval","countBlack","countWhite","evaluatePosition","useEffect","setTimeout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ea4d6b6.chunk.js","sourcesContent":["export class InvalidMoveError extends Error {\n  constructor() {\n    super()\n    this.name = 'InvalidMoveError'\n  }\n}\n","import { clone, equals, zip } from 'ramda'\n\nimport { InvalidMoveError } from './errors'\n\nexport const getInitialState = () => {\n  const initialState = [...new Array(8)].map(() =>\n    [...new Array(8)].map(() => 'empty')\n  ) as BoardState\n\n  initialState[3][3] = initialState[4][4] = 'white'\n  initialState[3][4] = initialState[4][3] = 'black'\n\n  return initialState\n}\n\nexport const opposite = (color: 'black' | 'white') =>\n  color === 'black' ? 'white' : 'black'\n\nconst isValidPosition = (row: number, col: number) =>\n  0 <= row && row <= 7 && 0 <= col && col <= 7\n\nexport const performMove = (\n  state: BoardState,\n  turn: 'black' | 'white',\n  row: number,\n  col: number\n) => {\n  if (state[row][col] !== 'empty') {\n    throw new InvalidMoveError()\n  }\n\n  if (!isValidPosition(row, col)) {\n    throw new InvalidMoveError()\n  }\n\n  const allDr = [-1, -1, -1, 0, 1, 1, 1, 0]\n  const allDc = [-1, 0, 1, 1, 1, 0, -1, -1]\n  const dirs = zip(allDr, allDc)\n\n  const nextState = clone(state)\n\n  dirs.forEach(([dr, dc]) => {\n    let [nr, nc] = [row + dr, col + dc]\n    if (!isValidPosition(nr, nc)) {\n      return\n    }\n    if (state[nr][nc] !== opposite(turn)) {\n      return\n    }\n\n    do {\n      ;[nr, nc] = [nr + dr, nc + dc]\n    } while (isValidPosition(nr, nc) && state[nr][nc] === opposite(turn))\n\n    if (!isValidPosition(nr, nc) || state[nr][nc] !== turn) {\n      return\n    }\n\n    ;[nr, nc] = [nr - dr, nc - dc]\n    while (state[nr][nc] === opposite(turn)) {\n      nextState[nr][nc] = turn\n      ;[nr, nc] = [nr - dr, nc - dc]\n    }\n\n    nextState[row][col] = turn\n  })\n\n  if (equals(state, nextState)) {\n    throw new InvalidMoveError()\n  }\n\n  return nextState\n}\n\nexport const isLegalMove = (\n  state: BoardState,\n  turn: 'black' | 'white',\n  row: number,\n  col: number\n) => {\n  try {\n    performMove(state, turn, row, col)\n    return true\n  } catch (err) {\n    if (!(err instanceof InvalidMoveError)) {\n      console.error(err)\n    }\n    return false\n  }\n}\n\nexport const listLegalMoves = (\n  state: BoardState,\n  turn: 'black' | 'white'\n): [number, number][] => {\n  const legalMoves: [number, number][] = []\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (isLegalMove(state, turn, row, col)) {\n        legalMoves.push([row, col])\n      }\n    }\n  }\n  return legalMoves\n}\n\nexport const countLegalMoves = (state: BoardState, turn: 'black' | 'white') =>\n  listLegalMoves(state, turn).length\n","import { countLegalMoves, listLegalMoves, opposite, performMove } from '.'\nimport { InvalidMoveError } from './errors'\n\nconst legalMovesHeuristic = (\n  heuristic: (\n    myMoves: [number, number][],\n    theirMoves: [number, number][]\n  ) => number\n): Strategy => (state: BoardState, turn: 'black' | 'white') => {\n  let [bestRow, bestCol, bestValue] = [-1, -1, -Infinity]\n\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      try {\n        const nextState = performMove(state, turn, row, col)\n        const value = heuristic(\n          listLegalMoves(nextState, turn),\n          listLegalMoves(nextState, opposite(turn))\n        )\n        if (value > bestValue) {\n          bestValue = value\n          bestRow = row\n          bestCol = col\n        }\n      } catch (err) {\n        if (!(err instanceof InvalidMoveError)) {\n          console.error(err)\n        }\n      }\n    }\n  }\n\n  return [bestRow, bestCol]\n}\n\nexport const maximizeLegalMovesDifference = legalMovesHeuristic(\n  (mine, theirs) => mine.length - theirs.length\n)\n\nexport const minimizeOpponentLegalMoves = legalMovesHeuristic(\n  (_, theirs) => -theirs.length\n)\n\nconst isFixedPiece = (state: BoardState, row: number, col: number) => {\n  let flag = true\n  for (let r = 0; r <= row; r++) {\n    for (let c = 0; c <= col; c++) {\n      if (state[r][c] !== state[row][col]) {\n        flag = false\n      }\n    }\n  }\n  if (flag) return true\n\n  flag = true\n  for (let r = 0; r <= row; r++) {\n    for (let c = col; c <= 7; c++) {\n      if (state[r][c] !== state[row][col]) {\n        flag = false\n      }\n    }\n  }\n  if (flag) return true\n\n  flag = true\n  for (let r = row; r <= 7; r++) {\n    for (let c = 0; c <= col; c++) {\n      if (state[r][c] !== state[row][col]) {\n        flag = false\n      }\n    }\n  }\n  if (flag) return true\n\n  flag = true\n  for (let r = row; r <= 7; r++) {\n    for (let c = col; c <= 7; c++) {\n      if (state[r][c] !== state[row][col]) {\n        flag = false\n      }\n    }\n  }\n  if (flag) return true\n\n  return false\n}\n\nconst calcPositionScore = (state: BoardState, turn: 'black' | 'white') => {\n  let value = countLegalMoves(state, turn)\n  ;[\n    [0, 0],\n    [0, 7],\n    [7, 0],\n    [7, 7],\n  ].forEach(([r, c]) => {\n    if (state[r][c] === turn) {\n      value += 10\n    }\n  })\n\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      if (state[r][c] === turn && isFixedPiece(state, r, c)) {\n        value += 2\n      }\n    }\n  }\n\n  return value\n}\n\nexport const countPieces = (state: BoardState, color: 'black' | 'white') =>\n  state.flat().filter((cell) => cell === color).length\n\nexport const evaluatePosition = (state: BoardState) => {\n  if (checkGameOver(state)) {\n    const countBlack = countPieces(state, 'black')\n    const countWhite = countPieces(state, 'white')\n    if (countBlack > countWhite) {\n      return -1000000 * (countBlack - countWhite)\n    } else if (countWhite > countBlack) {\n      return 1000000 * (countWhite - countBlack)\n    } else {\n      return 0\n    }\n  } else {\n    return calcPositionScore(state, 'white') - calcPositionScore(state, 'black')\n  }\n}\n\nexport const checkGameOver = (state: BoardState) =>\n  countLegalMoves(state, 'black') === 0 && countLegalMoves(state, 'white') === 0\n\nexport const minMaxPositionScore: Strategy = (\n  state: BoardState,\n  turn: 'black' | 'white'\n) => {\n  const encodedState = state\n    .flat()\n    .map((cell) => (cell === 'black' ? 'b' : cell === 'white' ? 'w' : 'e'))\n    .join('')\n  const encodedMove: string = (window as any).Module.ccall(\n    'computeNextMove',\n    'string',\n    ['string', 'number'],\n    [encodedState, turn === 'black' ? 0 : 1]\n  )\n  const [row, col] = encodedMove.split(' ').map((val) => parseInt(val))\n  return [row, col]\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\ninterface Props {\n  state: BoardCellState\n  onClick?: () => void\n  className?: string\n}\n\nconst Cell: React.FC<Props> = (props) => {\n  return (\n    <button\n      className={classNames('w-full rounded-md bg-green-500', {\n        'p-1': props.state !== 'empty',\n        'pb-full': props.state === 'empty',\n      })}\n      disabled={props.state !== 'empty'}\n      onClick={() => props.onClick?.()}\n    >\n      {props.state !== 'empty' ? (\n        <div\n          className={classNames('rounded-full pb-full w-full', {\n            'bg-white': props.state === 'white',\n            'bg-black': props.state === 'black',\n          })}\n        />\n      ) : null}\n    </button>\n  )\n}\n\nexport default Cell\n","import React from 'react'\nimport classNames from 'classnames'\n\nimport Cell from '../Cell'\n\ninterface Props {\n  className?: string\n  boardState: BoardState\n  onClick?: (row: number, col: number) => void\n}\n\nconst Board: React.FC<Props> = (props) => {\n  return (\n    <div\n      className={classNames(\n        'p-2 rounded-md bg-black grid grid-template-rows grid-cols-board gap-2',\n        props.className\n      )}\n    >\n      {[...new Array(8)].map((_, rowIdx) =>\n        [...new Array(8)].map((_, colIdx) => (\n          <Cell\n            key={8 * rowIdx + colIdx}\n            state={props.boardState[rowIdx][colIdx]}\n            onClick={() => props.onClick?.(rowIdx, colIdx)}\n          />\n        ))\n      )}\n    </div>\n  )\n}\n\nexport default Board\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport {\n  countLegalMoves,\n  getInitialState,\n  opposite,\n  performMove,\n} from '../../utils'\nimport { InvalidMoveError } from '../../utils/errors'\nimport {\n  checkGameOver,\n  countPieces,\n  evaluatePosition,\n  minMaxPositionScore,\n} from '../../utils/strategies'\n\nimport Board from '../Board'\n\nconst BLACK_STRATEGY: Strategy = null\nconst WHITE_STRATEGY: Strategy = minMaxPositionScore\n\nconst removePreTurn = (turn: 'black' | 'white' | 'pre-black' | 'pre-white') =>\n  turn === 'pre-black' ? 'black' : turn === 'pre-white' ? 'white' : turn\n\nconst Game: React.FC = () => {\n  const [turn, setTurn] = useState<\n    'black' | 'white' | 'pre-black' | 'pre-white'\n  >('black')\n  const [boardState, setBoardState] = useState<BoardState>(() =>\n    getInitialState()\n  )\n  const [error, setError] = useState<string | null>(null)\n\n  const makeMove = useCallback(\n    (row: number, col: number) => {\n      if (turn !== 'black' && turn !== 'white') {\n        return\n      }\n      const nextState = performMove(boardState, turn, row, col)\n      setBoardState(nextState)\n\n      const nextTurn =\n        countLegalMoves(nextState, opposite(turn)) > 0 ? opposite(turn) : turn\n      if (nextTurn === 'white' && WHITE_STRATEGY !== null) {\n        setTurn('pre-white')\n      } else if (nextTurn === 'black' && BLACK_STRATEGY !== null) {\n        setTurn('pre-black')\n      } else {\n        setTurn(nextTurn)\n      }\n    },\n    [boardState, turn]\n  )\n\n  const handleClick = (row: number, col: number) => {\n    if (\n      (turn === 'white' && WHITE_STRATEGY !== null) ||\n      (turn === 'black' && BLACK_STRATEGY !== null)\n    ) {\n      return\n    }\n    setError(null)\n    try {\n      makeMove(row, col)\n    } catch (err) {\n      if (err instanceof InvalidMoveError) {\n        setError('Invalid move')\n      } else {\n        console.error(err)\n      }\n    }\n  }\n\n  const legalMovesCount = useMemo(\n    () => countLegalMoves(boardState, removePreTurn(turn)),\n    [boardState, turn]\n  )\n\n  const isGameOver = useMemo(() => checkGameOver(boardState), [boardState])\n\n  const blackPieceCount = useMemo(() => countPieces(boardState, 'black'), [\n    boardState,\n  ])\n  const whitePieceCount = useMemo(() => countPieces(boardState, 'white'), [\n    boardState,\n  ])\n\n  const positionEval = useMemo(() => evaluatePosition(boardState), [boardState])\n\n  useEffect(() => {\n    if (isGameOver) {\n      return\n    }\n    if (turn === 'white' && WHITE_STRATEGY !== null) {\n      // @ts-ignore\n      const [row, col] = WHITE_STRATEGY(boardState, turn)\n      makeMove(row, col)\n    } else if (turn === 'black' && BLACK_STRATEGY !== null) {\n      // @ts-ignore\n      const [row, col] = BLACK_STRATEGY(boardState, turn)\n      makeMove(row, col)\n    }\n  }, [isGameOver, boardState, turn, makeMove])\n\n  useEffect(() => {\n    if (isGameOver) {\n      return\n    }\n    if (turn === 'pre-white') {\n      setTimeout(() => setTurn('white'), 500)\n    } else if (turn === 'pre-black') {\n      setTimeout(() => setTurn('black'), 500)\n    }\n  }, [isGameOver, turn])\n\n  const handleReset = () => {\n    setTurn('black')\n    setBoardState(getInitialState())\n    setError(null)\n  }\n\n  return (\n    <div className=\"w-full max-w-screen-md border\">\n      <div className=\"text-2xl text-center\">Othello bot</div>\n      <div className=\"text-right text-sm\">\n        Because the AI from Nintendo's Clubhouse 51 is too stronk\n      </div>\n      <div className=\"mt-4 flex justify-around\">\n        <span>\n          Next turn: {removePreTurn(turn)} ({legalMovesCount} legal moves)\n        </span>\n        <span>\n          Eval: {positionEval > 0 ? '+' : ''}\n          {positionEval}\n        </span>\n        <button\n          className=\"px-2 border rounded-md bg-gray-200 hover:bg-gray-300\"\n          onClick={() => handleReset()}\n        >\n          Reset\n        </button>\n      </div>\n      <Board boardState={boardState} onClick={handleClick} />\n      <div className=\"flex justify-around\">\n        <span>White: {whitePieceCount}</span>\n        <span>Black: {blackPieceCount}</span>\n      </div>\n      {isGameOver && (\n        <div className=\"text-center font-bold\">\n          Game over!{' '}\n          {whitePieceCount > blackPieceCount\n            ? 'White wins'\n            : whitePieceCount < blackPieceCount\n            ? 'Black wins'\n            : \"It's a draw\"}\n        </div>\n      )}\n      {error && <div className=\"text-center text-red-500\">{error}</div>}\n    </div>\n  )\n}\n\nexport default Game\n","import React from 'react'\n\nimport Game from './components/Game'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"m-8 flex justify-center\">\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}